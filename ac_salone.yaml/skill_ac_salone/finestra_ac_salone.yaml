homeassistant:
  customize:
    package.node_anchors:
        Entità clima:                               &climate        climate.condizionatore_salone
        Sensore Finestra:                           &windows       binary_sensor.finestra_tavolo
        Presenza in casa:                           &family       group.famiglia
  
################ controllare template


input_boolean:
  check_window_ac_salone:  
    name: Check Finestra

script:
  check_windows_temp_ext_ac_salone:
    alias: CONSIGLIO DI CHIUDERE LA FINESTRA IN BASE ALLA TEMPERATURA ESTERNA
    mode: single
    variables:
      climate: *climate
    sequence:
      - condition: state
        entity_id: *windows
        state: "on"
      - alias: Invia Notifica
        service: script.notify_family
        data: 
          notification_icon: 'mdi:air-conditioner'
          tag: 'ac_sala'
          title: --CLIMA CASA--
          message: >
            Temperatura esterna maggiore di quella interna. {{'Aprire' if is_state("input_select.season_of_use_ac_salone", "Inverno")else 'Chiudere' }} le finestre {{state_attr(climate,'friendly_name')}}.


  check_windows_ac_salone:
    alias: CON FINESTRA CHIUSA CONSIGLIA DI APRIRE LA FINESTRA O ACCENDE IL CONDIZIONATORE
    mode: single
    sequence:
      - condition: state
        entity_id: 
          - *windows
        state: "off"
      - if:
          - condition: template
            value_template: >
              {%set climate = 'climate.condizionatore_salone' %}
              {%set hum_ext = states('sensor.weather_humidity')|int(0) %}
              {%set temp_ext = states('sensor.weather_temperature')|float(0)%}
              {%set thom_ext = states('sensor.thom_esterno')|float(0)%}
              {%set thom_int = states('sensor.thom_ac_salone')|float(0)%}
              {% set mode = states('input_select.season_of_use_ac_salone') %} 
               {{
                ('Estate Gradi Celsius' == mode and state_attr(climate,'current_temperature')|float(0) > (temp_ext + states('input_number.offset_temp_ext_estate_salone')|float(0)) and state_attr(climate,'current_humidity')|int(0) < ( hum_ext +  states('input_number.offset_humidity_ext_salone')|int(0))) or 
                ('Inverno' == mode and temp_ext > (state_attr(climate,'current_temperature')|float(0) + states('input_number.offset_temperatura_ext_inverno_salone')|float(0))) or 
                ('Estate Indice di thom' == mode and thom_int > (thom_ext + states('input_number.offset_thom_ext_salone')|float(0))) or
                ('Umidità' == mode and state_attr(climate,'current_humidity')|int(0) > (hum_ext + states('input_number.offset_humidity_ext_salone')|int(0)))
              }}
        then:
          - alias: Mancata accensione clima in base alla temperatura esterna. consiglia di aprire finestre.
            service: script.clima_on_ext_salone
            data: {}
            
        else: 
          - alias: Accensione condizionatore
            service: script.climate_turn_on_ac_salone
            data: {}

automation:

  - id: avviso.finsestra_aperta_salone
    alias: Avviso Finestra Aperta in accensione clima salone
    initial_state: true
    variables:
      climate: *climate
    trigger:
    - platform: state                   
      entity_id: *climate
      not_to: "off"
      id: on_ac
    - platform: state 
      entity_id: 
        - *windows
      to: "on"
      id: finestra_on
    - platform: state
      entity_id: 
        - *windows
      from: "on"
      to: "off"
      for: "00:00:30"
      id: finestra_off
    - platform: state
      entity_id: 
        - *windows
      to: "on"
      for: "00:00:30"
      id: finestra_on_30
    condition:
      - condition: state
        entity_id: input_boolean.check_window_ac_salone
        state: "on"
    action:
    - alias: Avviso per apertura finestra con clima acceso
      if:
        - condition: trigger
          id: finestra_on
        - not:
            - condition: state
              entity_id: *climate
              state: "off"
        - condition: state
          entity_id: input_boolean.notify_ac_salone
          state: 'on'
      then:
          - alias: Invia Notifica
            service: script.notify_family
            data: 
              notification_icon: 'mdi:air-conditioner'
              tag: 'ac_sala'
              title: --{{state_attr(climate,'friendly_name')}}--
              message: "Attenzione è stata aperta la {{ trigger.to_state.name }} con {{state_attr(climate,'friendly_name')}} acceso!"

    - alias: Avviso per accensione condizionatore_salone con finestra aperta
      if:
        - condition: state
          state: "on"
          entity_id: 
            - *windows
            - input_boolean.notify_ac_salone
        - condition: trigger
          id: on_ac
      then:
          - alias: Invia Notifica
            service: script.notify_family
            data: 
              notification_icon: 'mdi:air-conditioner'
              tag: 'ac_sala'
              title: --{{state_attr(climate,'friendly_name')}}--
              message: 'Attenzione è stato acceso il {{ trigger.to_state.name }} ma la finestra è aperta!'

    - alias: Finestra chiusa nella fascia oraria corretta, accensione condizionatore_salone
      choose:
      - conditions:
        - condition: trigger
          id: finestra_off
        - condition: state
          entity_id: *climate
          state: "off"
        - condition: time
          after: "input_datetime.auto_on_ac_salone"
          before: "input_datetime.auto_off_ac_salone"
        - condition: template
          value_template: >
              {% set mode = states('input_select.season_of_use_ac_salone') %}
              {%set climate = 'climate.condizionatore_salone' %}
              {%set thom_int = states('sensor.thom_ac_salone')|float(0)%}
              {{
                ('Estate Gradi Celsius' == mode and state_attr(climate,'current_temperature')|float(0) > states('input_number.temperature_auto_on_summer_ac_salone')|float(0) and state_attr(climate,'current_humidity')|int(0) > states('input_number.humidity_auto_on_summer_ac_salone')|int(0)) or 
                ('Inverno' == mode and state_attr(climate,'current_temperature')|float(0) < (states('input_number.temperature_auto_on_winter_ac_salone'))|float(0)) or 
                ('Estate Indice di thom' == mode and thom_int > (states('input_number.temperature_auto_on_thom_ac_salone'))|float(0)) or
                ('Umidità' == mode and state_attr(climate,'current_humidity')|int(0) > (states('input_number.humidity_auto_on_ac_salone'))|int(0))
              }}
        sequence:
        - alias: Scegli se abilitato controllo presenza
          choose:

          - alias: Presenza in casa abilitato
            conditions:
            - "{{is_state('input_boolean.presence_ac_salone','on')}}"
            - condition: state
              state: "home"               
              entity_id: *family
            sequence:
            - alias: Accensione condizionatore
              service: script.climate_turn_on_ac_salone
              data: {}

          - alias: Presenza in casa disabilitato
            conditions:
            - "{{is_state('input_boolean.presence_ac_salone','off')}}"
            sequence:
            - alias: Accensione condizionatore
              service: script.climate_turn_on_ac_salone
              data: {}
              
    - alias: SPEGNI condizionatore_salone DOPO 30 SECONDI CHE è STATA APERTA LA FINESTRA SENZA NOTIFICA PERCHè VIENE RICEVUTA 30 SECONDI PRIMA 
      if:
        - condition: trigger
          id: finestra_on_30
      then:
        - alias: Spegnimento condizionatore_salone
          service: script.climate_turn_off_ac_salone 
          data: {}
